"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/CallManager.tsx":
/*!************************************!*\
  !*** ./components/CallManager.tsx ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCallManager: function() { return /* binding */ useCallManager; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-speech-recognition */ \"./node_modules/react-speech-recognition/lib/index.js\");\n/* harmony import */ var next_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-i18next */ \"./node_modules/next-i18next/dist/esm/index.js\");\n/* harmony import */ var _LanguageManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LanguageManager */ \"./components/LanguageManager.tsx\");\n/* harmony import */ var _callUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./callUtil */ \"./components/callUtil.ts\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\nconst CallContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst CallManager = (param)=>{\n    let { children } = param;\n    _s();\n    const isUserCalling = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const isChatbotSpeaking = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const speechUtteranceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const pauseTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const lastTranscriptRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"\");\n    const [pauseThreshold, setPauseThreshold] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(2); // Default 2 seconds\n    // Track if we're handling an interruption\n    const isHandlingInterruption = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Keep track of when bot started speaking to implement cooldown period\n    const botSpeechStartTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const cooldownPeriodMs = 700; // Cooldown after bot starts speaking\n    // Reference to AudioContext and nodes for echo cancellation\n    const audioContextRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const speechDetectorRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isUserSpeakingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Energy threshold for distinguishing between user and bot speech\n    const energyThresholdRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0.12);\n    // Add a reference for the current speech content to help with fingerprinting\n    const currentSpeechContentRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"\");\n    const commands = [\n        {\n            command: [\n                \"*\"\n            ],\n            callback: (command)=>{\n                // Only process command when a significant change occurs\n                if (command.trim() && command !== lastTranscriptRef.current) {\n                    handleUserSpeech(command);\n                }\n            }\n        }\n    ];\n    const [isWinSpeaking, setIsWinSpeaking] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(isChatbotSpeaking.current);\n    const [isCalling, setIsCalling] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(isUserCalling.current);\n    const { transcript, resetTranscript, listening } = (0,react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__.useSpeechRecognition)({\n        commands\n    });\n    const { t } = (0,next_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation)();\n    const [userSpeechSynthesis, setUserSpeechSynthesis] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [userLocalStorage, setUserLocalStorage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const { selectedLanguage } = (0,_LanguageManager__WEBPACK_IMPORTED_MODULE_4__.useLanguage)();\n    const defaultIntroduction = t(\"Win.introduction\");\n    const defaultMessage = [\n        {\n            message: defaultIntroduction,\n            sender: \"ChatGPT\"\n        }\n    ];\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(defaultMessage);\n    // Initialize audio context when component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (true) {\n            try {\n                const AudioContext = window.AudioContext || window.webkitAudioContext;\n                audioContextRef.current = new AudioContext();\n                setupAudioProcessing();\n            } catch (error) {\n                console.error(\"Error initializing AudioContext:\", error);\n            }\n        }\n        return ()=>{\n            // Clean up audio context when component unmounts\n            if (audioContextRef.current && audioContextRef.current.state !== \"closed\") {\n                audioContextRef.current.close();\n            }\n        };\n    }, []);\n    // Set up audio processing for speech detection with echo cancellation\n    const setupAudioProcessing = async ()=>{\n        if (!audioContextRef.current) return;\n        try {\n            // Get user microphone access\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio: {\n                    echoCancellation: true,\n                    noiseSuppression: true,\n                    autoGainControl: true // Enable automatic gain control\n                }\n            });\n            // Create audio source from microphone\n            const micSource = audioContextRef.current.createMediaStreamSource(stream);\n            // Create script processor for analyzing audio\n            const processor = audioContextRef.current.createScriptProcessor(4096, 1, 1);\n            speechDetectorRef.current = processor;\n            micSource.connect(processor);\n            // Process audio data to detect speech with enhanced echo cancellation\n            processor.onaudioprocess = (e)=>{\n                if (isChatbotSpeaking.current) {\n                    // Skip processing during the cooldown period\n                    const timeSinceBotStarted = Date.now() - botSpeechStartTimeRef.current;\n                    if (timeSinceBotStarted < cooldownPeriodMs) {\n                        return;\n                    }\n                    const input = e.inputBuffer.getChannelData(0);\n                    // Calculate audio energy in human speech frequency range\n                    const speechEnergy = calculateSpeechEnergy(input);\n                    // If energy exceeds threshold, likely user is speaking\n                    if (speechEnergy > energyThresholdRef.current) {\n                        if (!isUserSpeakingRef.current) {\n                            isUserSpeakingRef.current = true;\n                            // Add debounce to prevent false triggers\n                            setTimeout(()=>{\n                                if (isUserSpeakingRef.current) {\n                                    console.log(\"User interrupted - human speech detected\");\n                                    handleInterruption();\n                                }\n                            }, 180); // Wait 180ms to confirm consistent speech\n                        }\n                    } else {\n                        isUserSpeakingRef.current = false;\n                    }\n                }\n            };\n            // Connect but with gain node to control volume going to output\n            const gainNode = audioContextRef.current.createGain();\n            gainNode.gain.value = 0; // Set to 0 to prevent audio feedback to speakers\n            processor.connect(gainNode);\n            gainNode.connect(audioContextRef.current.destination);\n            // Disconnect when not needed\n            if (!isChatbotSpeaking.current) {\n                processor.disconnect();\n            }\n        } catch (error) {\n            console.error(\"Error setting up audio processing:\", error);\n        }\n    };\n    // Calculate energy specifically in human speech frequency ranges\n    const calculateSpeechEnergy = (buffer)=>{\n        let sum = 0;\n        const bufferLength = buffer.length;\n        for(let i = 0; i < bufferLength; i++){\n            sum += Math.abs(buffer[i]);\n        }\n        return sum / bufferLength;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setUserSpeechSynthesis(window.speechSynthesis);\n        setUserLocalStorage(localStorage);\n    }, []);\n    // if selectedLanguage changes, reset call\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        endCall();\n    }, [\n        defaultIntroduction,\n        selectedLanguage\n    ]);\n    // Monitor transcript changes to detect interruptions\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isChatbotSpeaking.current && transcript && transcript !== lastTranscriptRef.current) {\n            // Check if we're outside the cooldown period\n            const timeSinceBotStarted = Date.now() - botSpeechStartTimeRef.current;\n            if (timeSinceBotStarted > cooldownPeriodMs) {\n                // User is speaking while the bot is speaking - handle interruption\n                if (transcript.trim().length > 3) {\n                    // Validate that this isn't an echo of bot's own voice\n                    if (!isEchoOfBotSpeech(transcript)) {\n                        handleInterruption();\n                    }\n                }\n            }\n        }\n        // Store the current transcript for comparison\n        if (transcript) {\n            lastTranscriptRef.current = transcript;\n        }\n        // Reset pause timer when user speaks\n        if (transcript && transcript.trim() && pauseTimerRef.current) {\n            clearTimeout(pauseTimerRef.current);\n            pauseTimerRef.current = null;\n        }\n        // Set pause timer when user stops speaking\n        if (listening && transcript && !pauseTimerRef.current && !isChatbotSpeaking.current) {\n            pauseTimerRef.current = setTimeout(()=>{\n                // Process the transcript after pause\n                if (transcript.trim()) {\n                    handleSend(transcript);\n                    resetTranscript();\n                }\n                pauseTimerRef.current = null;\n            }, pauseThreshold * 1000);\n        }\n    }, [\n        transcript,\n        listening,\n        pauseThreshold\n    ]);\n    // Simplified echo detection\n    const isEchoOfBotSpeech = (transcriptText)=>{\n        if (!currentSpeechContentRef.current || transcriptText.length < 3) return false;\n        // Normalize strings for comparison (lowercase, remove punctuation)\n        const normalizeText = (text)=>text.toLowerCase().replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\");\n        const normalizedTranscript = normalizeText(transcriptText);\n        const normalizedBotSpeech = normalizeText(currentSpeechContentRef.current);\n        // Check if transcript is a substring of bot speech\n        return normalizedBotSpeech.includes(normalizedTranscript);\n    };\n    // Connect/disconnect audio processor based on bot speaking state\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (speechDetectorRef.current && audioContextRef.current) {\n            if (isChatbotSpeaking.current) {\n                // Connect the processor when bot starts speaking to detect interruptions\n                try {\n                    speechDetectorRef.current.connect(audioContextRef.current.destination);\n                } catch (error) {\n                    console.error(\"Error connecting speech detector:\", error);\n                }\n            } else {\n                // Disconnect when bot stops speaking to save resources\n                try {\n                    speechDetectorRef.current.disconnect();\n                } catch (error) {\n                // Ignore disconnection errors\n                }\n            }\n        }\n    }, [\n        isWinSpeaking\n    ]);\n    const handleInterruption = ()=>{\n        if (isChatbotSpeaking.current && !isHandlingInterruption.current) {\n            isHandlingInterruption.current = true;\n            console.log(\"User interrupted - stopping bot speech\");\n            // Stop the current speech\n            if (userSpeechSynthesis && speechUtteranceRef.current) {\n                userSpeechSynthesis.cancel();\n            }\n            // Reset speaking state\n            isChatbotSpeaking.current = false;\n            setIsWinSpeaking(false);\n            currentSpeechContentRef.current = \"\";\n            // Short delay to prevent race conditions\n            setTimeout(()=>{\n                isHandlingInterruption.current = false;\n            }, 500);\n        }\n    };\n    const handleUserSpeech = (userInput)=>{\n        // Reset pause timer if exists\n        if (pauseTimerRef.current) {\n            clearTimeout(pauseTimerRef.current);\n            pauseTimerRef.current = null;\n        }\n        // Set new pause timer\n        pauseTimerRef.current = setTimeout(()=>{\n            if (userInput.trim()) {\n                handleSend(userInput);\n                resetTranscript();\n            }\n            pauseTimerRef.current = null;\n        }, pauseThreshold * 1000);\n    };\n    const chatBotSpeak = (message)=>{\n        if (!userSpeechSynthesis || !isUserCalling.current) {\n            return;\n        }\n        if (!react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__[\"default\"].browserSupportsSpeechRecognition()) {\n            userSpeechSynthesis.speak(new SpeechSynthesisUtterance(t(\"Win.browserNotSupportSpeechRecognitionMessage\")));\n            return;\n        }\n        // Store speech content for echo detection\n        currentSpeechContentRef.current = message;\n        // Create and store the utterance object so we can cancel it if interrupted\n        const utterance = new SpeechSynthesisUtterance(message);\n        utterance.lang = selectedLanguage;\n        utterance.onstart = handleChatbotSpeechStart;\n        utterance.onend = handleChatbotSpeechEnd;\n        // Add properties for clear speech\n        utterance.volume = 1.0; // Full volume for clarity\n        utterance.rate = 1.0; // Normal speech rate\n        utterance.pitch = 1.0; // Normal pitch\n        speechUtteranceRef.current = utterance;\n        userSpeechSynthesis.speak(utterance);\n    };\n    const handleChatbotSpeechStart = ()=>{\n        isChatbotSpeaking.current = true;\n        setIsWinSpeaking(true);\n        // Record the time when bot started speaking for cooldown implementation\n        botSpeechStartTimeRef.current = Date.now();\n        // Reset user speaking detection\n        isUserSpeakingRef.current = false;\n        // Start or ensure recognition is running to detect interruptions\n        if (!listening) {\n            react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__[\"default\"].startListening({\n                language: selectedLanguage,\n                continuous: true\n            });\n        }\n    };\n    const handleChatbotSpeechEnd = ()=>{\n        isChatbotSpeaking.current = false;\n        setIsWinSpeaking(false);\n        speechUtteranceRef.current = null;\n        currentSpeechContentRef.current = \"\";\n        isUserSpeakingRef.current = false;\n        // Keep listening for user input\n        if (isUserCalling.current && !listening) {\n            react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__[\"default\"].startListening({\n                language: selectedLanguage,\n                continuous: true\n            });\n        }\n    };\n    const handleSend = async (message)=>{\n        if (!message) {\n            return;\n        }\n        const formattedMessage = {\n            message,\n            sender: \"user\"\n        };\n        const updatedMessages = [\n            ...messages,\n            formattedMessage\n        ];\n        setMessages(updatedMessages);\n        // Call from conversation ideas\n        if (!isUserCalling.current) {\n            isUserCalling.current = true;\n            setIsCalling(isUserCalling.current);\n        }\n        // If bot is speaking, stop it\n        if (isChatbotSpeaking.current) {\n            var _userSpeechSynthesis;\n            (_userSpeechSynthesis = userSpeechSynthesis) === null || _userSpeechSynthesis === void 0 ? void 0 : _userSpeechSynthesis.cancel();\n            isChatbotSpeaking.current = false;\n            setIsWinSpeaking(false);\n        }\n        const chatGPTAnswer = await (0,_callUtil__WEBPACK_IMPORTED_MODULE_5__.getChatGptAnswer)(updatedMessages);\n        setMessages([\n            ...updatedMessages,\n            {\n                message: chatGPTAnswer,\n                sender: \"ChatGPT\"\n            }\n        ]);\n        chatBotSpeak(chatGPTAnswer);\n    };\n    const userSpeak = ()=>{\n        // Start listening continuously\n        react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__[\"default\"].startListening({\n            language: selectedLanguage,\n            continuous: true\n        });\n        if (transcript !== \"\") {\n            resetTranscript();\n        }\n    };\n    const userStopSpeaking = ()=>{\n        react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__[\"default\"].stopListening();\n        // Process any pending transcript\n        if (transcript.trim()) {\n            handleSend(transcript);\n            resetTranscript();\n        }\n        // Clear any pending pause timer\n        if (pauseTimerRef.current) {\n            clearTimeout(pauseTimerRef.current);\n            pauseTimerRef.current = null;\n        }\n    };\n    const userCall = ()=>{\n        isUserCalling.current = true;\n        setIsCalling(isUserCalling.current);\n        if (!react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__[\"default\"].browserSupportsSpeechRecognition()) {\n            setMessages([\n                ...messages,\n                {\n                    message: t(\"Win.browserNotSupportSpeechRecognitionMessage\"),\n                    sender: \"ChatGPT\"\n                }\n            ]);\n            isUserCalling.current = false;\n            setIsCalling(isUserCalling.current);\n            return;\n        }\n        const firstMessage = t(\"Win.firstMessage\");\n        const formattedMessage = {\n            message: firstMessage,\n            sender: \"assistant\"\n        };\n        const updatedMessages = [\n            ...messages,\n            formattedMessage\n        ];\n        setMessages(updatedMessages);\n        // Start listening before the bot speaks\n        react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__[\"default\"].startListening({\n            language: selectedLanguage,\n            continuous: true\n        });\n        chatBotSpeak(firstMessage);\n    };\n    const updateCallHistory = ()=>{\n        if (userLocalStorage && messages.length > 1) {\n            var _userLocalStorage;\n            const storage = userLocalStorage.getItem(\"callHistory\") ? JSON.parse(userLocalStorage.getItem(\"callHistory\")) : [];\n            const newCallHistory = [\n                ...storage,\n                {\n                    messages,\n                    date: new Date().toLocaleString()\n                }\n            ];\n            (_userLocalStorage = userLocalStorage) === null || _userLocalStorage === void 0 ? void 0 : _userLocalStorage.setItem(\"callHistory\", JSON.stringify(newCallHistory));\n        }\n    };\n    const hangUp = ()=>{\n        // Clear any pending pause timer\n        if (pauseTimerRef.current) {\n            clearTimeout(pauseTimerRef.current);\n            pauseTimerRef.current = null;\n        }\n        // Disconnect audio processor if active\n        if (speechDetectorRef.current && audioContextRef.current && speechDetectorRef.current.context.state !== \"closed\") {\n            try {\n                speechDetectorRef.current.disconnect();\n            } catch (error) {\n            // Ignore errors on disconnection\n            }\n        }\n        react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__[\"default\"].stopListening();\n        setMessages(defaultMessage);\n        isUserCalling.current = false;\n        setIsCalling(isUserCalling.current);\n        currentSpeechContentRef.current = \"\";\n        if (isChatbotSpeaking.current) {\n            var _userSpeechSynthesis;\n            (_userSpeechSynthesis = userSpeechSynthesis) === null || _userSpeechSynthesis === void 0 ? void 0 : _userSpeechSynthesis.cancel();\n            isChatbotSpeaking.current = false;\n            setIsWinSpeaking(false);\n            speechUtteranceRef.current = null;\n        }\n        react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__[\"default\"].abortListening();\n        resetTranscript();\n    };\n    const endCall = ()=>{\n        hangUp();\n        updateCallHistory();\n    };\n    const updatePauseThreshold = (seconds)=>{\n        if (seconds >= 0.5 && seconds <= 5) {\n            setPauseThreshold(seconds);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(CallContext.Provider, {\n        value: {\n            userCall,\n            userSpeak,\n            userStopSpeaking,\n            listening,\n            isCalling,\n            endCall,\n            handleSend,\n            messages,\n            isChatbotSpeaking: isWinSpeaking,\n            pauseThreshold,\n            setPauseThreshold: updatePauseThreshold\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"D:\\\\react-voice-chatbot\\\\react-voice-chatbot\\\\components\\\\CallManager.tsx\",\n        lineNumber: 541,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CallManager, \"iYZflVNu4+tAwooFhR8JkfGdnHU=\", false, function() {\n    return [\n        react_speech_recognition__WEBPACK_IMPORTED_MODULE_2__.useSpeechRecognition,\n        next_i18next__WEBPACK_IMPORTED_MODULE_3__.useTranslation,\n        _LanguageManager__WEBPACK_IMPORTED_MODULE_4__.useLanguage\n    ];\n});\n_c = CallManager;\nconst useCallManager = ()=>{\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(CallContext);\n    if (context === undefined) {\n        throw new Error(\"useCallManager must be used within a CallManager\");\n    }\n    return context;\n};\n_s1(useCallManager, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/* harmony default export */ __webpack_exports__[\"default\"] = (CallManager);\nvar _c;\n$RefreshReg$(_c, \"CallManager\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/CallManager.tsx\n"));

/***/ })

});