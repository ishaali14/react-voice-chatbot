[{"D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\api\\chat\\message.ts":"1","D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\api\\hello.ts":"2","D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\index.tsx":"3","D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\_app.tsx":"4","D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\_document.tsx":"5","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\CallWin.tsx":"6","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\CallHistory.tsx":"7","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\CallManager.tsx":"8","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\callUtil.ts":"9","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\ConversationIdeasModal.tsx":"10","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\ConversionIdea.tsx":"11","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\GithubLink.tsx":"12","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\LanguageDropdown.tsx":"13","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\LanguageManager.tsx":"14","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\MainLayout.tsx":"15","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\MessageBox.tsx":"16","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\TalkButton.tsx":"17","D:\\react-voice-chatbot\\react-voice-chatbot\\lib\\i18n\\getServerTranslations.ts":"18"},{"size":1078,"mtime":1744700336954,"results":"19","hashOfConfig":"20"},{"size":315,"mtime":1744700336954,"results":"21","hashOfConfig":"20"},{"size":517,"mtime":1744700336955,"results":"22","hashOfConfig":"20"},{"size":343,"mtime":1744700336941,"results":"23","hashOfConfig":"20"},{"size":246,"mtime":1744700336941,"results":"24","hashOfConfig":"20"},{"size":1429,"mtime":1744700336925,"results":"25","hashOfConfig":"20"},{"size":7038,"mtime":1744700336926,"results":"26","hashOfConfig":"20"},{"size":6602,"mtime":1744700336926,"results":"27","hashOfConfig":"20"},{"size":1186,"mtime":1744700336932,"results":"28","hashOfConfig":"20"},{"size":3018,"mtime":1744700336927,"results":"29","hashOfConfig":"20"},{"size":1605,"mtime":1744700336927,"results":"30","hashOfConfig":"20"},{"size":523,"mtime":1744700336928,"results":"31","hashOfConfig":"20"},{"size":1893,"mtime":1744700336928,"results":"32","hashOfConfig":"20"},{"size":1355,"mtime":1744700336930,"results":"33","hashOfConfig":"20"},{"size":1150,"mtime":1744700336930,"results":"34","hashOfConfig":"20"},{"size":685,"mtime":1744700336930,"results":"35","hashOfConfig":"20"},{"size":2867,"mtime":1744700336931,"results":"36","hashOfConfig":"20"},{"size":716,"mtime":1744700336933,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mtoprg",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\api\\chat\\message.ts",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\api\\hello.ts",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\index.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\_app.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\pages\\_document.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\CallWin.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\CallHistory.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\CallManager.tsx",["93"],[],"import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\r\n\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport { useTranslation } from 'next-i18next';\r\nimport { useLanguage } from './LanguageManager';\r\n\r\nimport { getChatGptAnswer } from './callUtil';\r\nimport { CallHistoryType } from './CallHistory';\r\n\r\nexport interface MessageType {\r\n  message: string;\r\n  sender: string;\r\n}\r\n\r\ninterface CallContextType {\r\n  userCall: () => void;\r\n  userSpeak: () => void;\r\n  userStopSpeaking: () => void;\r\n  listening: boolean;\r\n  isCalling: boolean;\r\n  endCall: () => void;\r\n  handleSend: (message: string) => void;\r\n  messages: MessageType[];\r\n  isChatbotSpeaking: boolean;\r\n}\r\n\r\nconst CallContext = createContext<CallContextType | undefined>(undefined);\r\n\r\ntype CallManagerProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst CallManager: React.FC<CallManagerProps> = ({ children }) => {\r\n  const isUserCalling = useRef(false);\r\n  const isChatbotSpeaking = useRef(false);\r\n\r\n  const commands = [\r\n    {\r\n      command: ['*'],\r\n      callback: (command: string) => handleSend(command),\r\n    },\r\n  ];\r\n\r\n  const [isWinSpeaking, setIsWinSpeaking] = useState(isChatbotSpeaking.current);\r\n  const [isCalling, setIsCalling] = useState(isUserCalling.current);\r\n  const { transcript, resetTranscript, listening } = useSpeechRecognition({\r\n    commands,\r\n  });\r\n  const { t } = useTranslation();\r\n  const [userSpeechSynthesis, setUserSpeechSynthesis] = useState<SpeechSynthesis>();\r\n  const [userLocalStorage, setUserLocalStorage] = useState<Storage>();\r\n  const { selectedLanguage } = useLanguage();\r\n  const defaultIntroduction = t('Win.introduction');\r\n  const defaultMessage = [\r\n    {\r\n      message: defaultIntroduction,\r\n      sender: 'ChatGPT',\r\n    },\r\n  ];\r\n  const [messages, setMessages] = useState<MessageType[]>(defaultMessage);\r\n\r\n  useEffect(() => {\r\n    setUserSpeechSynthesis(window.speechSynthesis);\r\n    setUserLocalStorage(localStorage);\r\n  }, []);\r\n\r\n  // if selectedLanguage changes, reset call\r\n  useEffect(() => {\r\n    endCall();\r\n  }, [defaultIntroduction, selectedLanguage]);\r\n\r\n  const chatBotSpeak = (message: string) => {\r\n    if (isChatbotSpeaking.current || !userSpeechSynthesis || !isUserCalling.current) {\r\n      return;\r\n    }\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n      userSpeechSynthesis.speak(\r\n        new SpeechSynthesisUtterance(t('Win.browserNotSupportSpeechRecognitionMessage'))\r\n      );\r\n      return;\r\n    }\r\n    const utterance = new SpeechSynthesisUtterance(message);\r\n    utterance.lang = selectedLanguage;\r\n    utterance.onstart = handleChatbotSpeechStart;\r\n    utterance.onend = handleChatbotSpeechEnd;\r\n    userSpeechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const handleChatbotSpeechStart = () => {\r\n    isChatbotSpeaking.current = true;\r\n    setIsWinSpeaking(true);\r\n    SpeechRecognition.stopListening();\r\n  };\r\n\r\n  const handleChatbotSpeechEnd = () => {\r\n    if (isUserCalling.current) {\r\n      SpeechRecognition.startListening({ language: selectedLanguage });\r\n    }\r\n    isChatbotSpeaking.current = false;\r\n    setIsWinSpeaking(false);\r\n  };\r\n\r\n  const handleSend = async (message: string) => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    const formattedMessage = {\r\n      message,\r\n      direction: 'outgoing',\r\n      sender: 'user',\r\n    };\r\n\r\n    const updatedMessages = [...messages, formattedMessage];\r\n\r\n    setMessages(updatedMessages);\r\n\r\n    // Call from conversation ideas\r\n    if (!isUserCalling.current) {\r\n      isUserCalling.current = true;\r\n      setIsCalling(isUserCalling.current);\r\n    }\r\n    if (isChatbotSpeaking.current) {\r\n      userSpeechSynthesis?.cancel();\r\n      isChatbotSpeaking.current = false;\r\n      setIsWinSpeaking(false);\r\n    }\r\n    const chatGPTAnswer = await getChatGptAnswer(updatedMessages);\r\n    setMessages([\r\n      ...updatedMessages,\r\n      {\r\n        message: chatGPTAnswer,\r\n        sender: 'ChatGPT',\r\n      },\r\n    ]);\r\n    chatBotSpeak(chatGPTAnswer);\r\n  };\r\n\r\n  const userSpeak = () => {\r\n    SpeechRecognition.startListening({ language: selectedLanguage });\r\n\r\n    if (transcript !== '') {\r\n      resetTranscript();\r\n    }\r\n  };\r\n  const userStopSpeaking = () => {\r\n    SpeechRecognition.stopListening();\r\n  };\r\n\r\n  const userCall = () => {\r\n    isUserCalling.current = true;\r\n    setIsCalling(isUserCalling.current);\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n      setMessages([\r\n        ...messages,\r\n        {\r\n          message: t('Win.browserNotSupportSpeechRecognitionMessage'),\r\n          sender: 'ChatGPT',\r\n        },\r\n      ]);\r\n      isUserCalling.current = false;\r\n      setIsCalling(isUserCalling.current);\r\n      return;\r\n    }\r\n\r\n    const firstMessage = t('Win.firstMessage');\r\n    const formattedMessage = {\r\n      message: firstMessage,\r\n      sender: 'assistant',\r\n    };\r\n\r\n    const updatedMessages = [...messages, formattedMessage];\r\n\r\n    setMessages(updatedMessages);\r\n    chatBotSpeak(firstMessage);\r\n  };\r\n\r\n  const resetConversation = () => {\r\n    setMessages(defaultMessage);\r\n  };\r\n\r\n  const updateCallHistory = () => {\r\n    if (userLocalStorage && messages.length > 1) {\r\n      const storage = userLocalStorage.getItem('callHistory')\r\n        ? JSON.parse(userLocalStorage.getItem('callHistory') as string)\r\n        : [];\r\n      const newCallHistory: CallHistoryType[] = [...storage, { messages, date: new Date() }];\r\n      userLocalStorage?.setItem('callHistory', JSON.stringify(newCallHistory));\r\n    }\r\n  };\r\n\r\n  const hangUp = () => {\r\n    SpeechRecognition.stopListening();\r\n    resetConversation();\r\n    isUserCalling.current = false;\r\n    setIsCalling(isUserCalling.current);\r\n    if (isChatbotSpeaking.current) {\r\n      userSpeechSynthesis?.cancel();\r\n      isChatbotSpeaking.current = false;\r\n      setIsWinSpeaking(false);\r\n    }\r\n    SpeechRecognition.abortListening();\r\n  };\r\n\r\n  const endCall = () => {\r\n    hangUp();\r\n    updateCallHistory();\r\n  };\r\n\r\n  return (\r\n    <CallContext.Provider\r\n      value={{\r\n        userCall,\r\n        userSpeak,\r\n        userStopSpeaking,\r\n        listening,\r\n        isCalling,\r\n        endCall,\r\n        handleSend,\r\n        messages,\r\n        isChatbotSpeaking: isWinSpeaking,\r\n      }}\r\n    >\r\n      {children}\r\n    </CallContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCallManager = () => {\r\n  const context = useContext(CallContext);\r\n  if (context === undefined) {\r\n    throw new Error('useCallManager must be used within a CallManager');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default CallManager;\r\n","D:\\react-voice-chatbot\\react-voice-chatbot\\components\\callUtil.ts",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\ConversationIdeasModal.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\ConversionIdea.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\GithubLink.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\LanguageDropdown.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\LanguageManager.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\MainLayout.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\MessageBox.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\components\\TalkButton.tsx",[],[],"D:\\react-voice-chatbot\\react-voice-chatbot\\lib\\i18n\\getServerTranslations.ts",[],[],{"ruleId":"94","severity":1,"message":"95","line":70,"column":6,"nodeType":"96","endLine":70,"endColumn":45,"suggestions":"97"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'endCall'. Either include it or remove the dependency array.","ArrayExpression",["98"],{"desc":"99","fix":"100"},"Update the dependencies array to be: [defaultIntroduction, endCall, selectedLanguage]",{"range":"101","text":"102"},[2113,2152],"[defaultIntroduction, endCall, selectedLanguage]"]